// Code generated by kickr; DO NOT EDIT.

package build

import (
	"fmt"
	"regexp"
	"time"
)

var (
	// devRegexp represents v0.0.0-<number of commits>-<vcs letter (g)><sha>
	devRegexp = regexp.MustCompile(`^v[0-9]+(\.[0-9]+){2}-[0-9]+-[a-z]`)

	// preRegexp represents v0.0.0-<identifier>.<number of prerelease>
	preRegexp = regexp.MustCompile(`^v[0-9]+(\.[0-9]+){2}-[a-zA-Z]\.[0-9]+$`)
)

var version = "v0.0.0"

var (
	branch string
	commit string
	date   string
)

// Info contains all build information.
type Info struct {
	// Branch is build branch.
	Branch string

	// Commit is build specific commit hash (or sha).
	Commit string

	// Date is the build date.
	Date time.Time

	// Version is the build version.
	Version string
}

var _ fmt.Stringer = (*Info)(nil) // ensure interface is implemented

// String returns a string representation of the build.
func (i Info) String() string {
	if devRegexp.MatchString(i.Version) { // v0.0.0-<number of commits>-<vcs letter (g)><sha> so no need to print commit sha additionally
		return fmt.Sprintf("%s+%s %s", i.Version, i.Branch, i.Date.Format(time.RFC3339))
	}
	if preRegexp.MatchString(i.Version) { // v0.0.0-<identifier>.<number of prerelease> so no need to print branch additionally
		return fmt.Sprintf("%s-%s %s", i.Version, i.Commit, i.Date.Format(time.RFC3339))
	}
	return fmt.Sprintf("%s-%s+%s %s", i.Version, i.Commit, i.Branch, i.Date.Format(time.RFC3339)) // v0.0.0 so let's print commit and branch
}

// GetInfo returns the build information.
func GetInfo() Info {
	return Info{
		Branch: branch,
		Commit: commit,
		Date: func() time.Time {
			t, _ := time.Parse(time.RFC3339, date)
			return t
		}(),
		Version: version,
	}
}
