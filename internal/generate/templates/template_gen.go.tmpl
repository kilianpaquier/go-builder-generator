{{- if not .NoNotice }}
// Code generated by go-builder-generator (https://github.com/kilianpaquier/go-builder-generator). DO NOT EDIT.
{{- end }}

package {{ .DestPackage }}

{{ if gt (len .Imports) 0 -}}
import (
{{- range .Imports }}
    {{ . }}
{{- end }}
)
{{- end }}

{{- $builder := print .Name "Builder" }}
{{- $fullname := .Name }}
{{- if not (eq .SourcePackage "") }}
{{- $fullname = print .SourcePackage "." .Name }}
{{- end }}

// {{ $builder }} represents {{ .Name }}'s builder.
type {{ $builder }} struct {
    build {{ $fullname }}
}

{{ $new := "new" }}
{{ if .Exported }}
{{ $new = "New" }}
{{ end }}

// {{ $new }}{{ title $builder }} creates a new {{ $builder }}.
func {{ $new }}{{ title $builder }}() *{{ $builder }} {
    return &{{ $builder }}{}
}

// Copy reassigns the builder struct (behind pointer) to a new pointer and returns it.
func (b *{{ $builder }}) Copy() *{{ $builder }} {
    return &{{ $builder }}{b.build}
}

// Build returns built {{ .Name }}.
func (b *{{ $builder }}) Build() (*{{ $fullname }}{{ if .ValidateFunc }}, error{{ end }}) {
{{- if gt (len .DefaultFuncs) 0 }}
    b = b{{ range .DefaultFuncs }}.{{ . }}(){{ end }}

{{ end -}}

    result := b.build
{{- if .ValidateFunc }}
    if err := result.{{ .ValidateFunc }}(); err != nil {
        return nil, fmt.Errorf("failed to validate '{{ .Name }}' struct: %w", err)
    }
    return &result, nil
{{- else }}
    return &result
{{- end }}
}

{{- range .Properties }}
{{- if not .Ignore }}

{{/*
    put setter prefix first letter in upper:
        - if the property is exported (logical, to be able to set the value)
        - if the parent is unexported (exported function for an unexported type)
*/}}
{{ $prefix := $.SetterPrefix }}
{{ if or .Exported (not $.Exported) }}
{{ $prefix = title $.SetterPrefix }}
{{ end }}

{{/* 
    put unexported name first letter in upper:
        - if the prefix is present (beauty) 
        - if the parent is unexported (exported function for an unexported type)
*/}}
{{ $name := .Name }}
{{ if or (not (eq $prefix "")) (not $.Exported) }}
{{ $name = title .Name }}
{{ end }}
{{ $funcName := .FuncName | default (printf "%s%s" $prefix $name) }}

// {{ $funcName }} sets {{ $.Name }}'s {{ .Name }}.
{{- if .Append }}
func (b *{{ $builder }}) {{ $funcName }}({{ .ParamName }} ...{{ .AlteredType }}) *{{ $builder }} {
{{- if $.ReturnCopy }}
    b = b.Copy()
{{- end }}
{{- if hasPrefix "*" .InitialType }}
    *b.build.{{ .Name }} = append(*b.build.{{ .Name }}, {{ .ParamName }}...)
{{- else }}
    b.build.{{ .Name }} = append(b.build.{{ .Name }}, {{ .ParamName }}...)
{{- end }}
    return b
}
{{- else }}
func (b *{{ $builder }}) {{ $funcName }}({{ .ParamName }} {{ if .Pointer }}*{{ end }}{{ .AlteredType }}) *{{ $builder }} {
{{- if $.ReturnCopy }}
    b = b.Copy()
{{- end }}
    b.build.{{ .Name }} = {{ if and (not .Pointer) (hasPrefix "*" .InitialType) }}&{{ end }}{{ .ParamName }}
    return b
}
{{- end }}
{{- end }}
{{- end }}
