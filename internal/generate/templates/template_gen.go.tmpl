{{ if not .Opts.NoNotice }}
// Code generated by go-builder-generator (https://github.com/kilianpaquier/go-builder-generator). DO NOT EDIT.
{{ end }}

{{ if and .Packages.SameModule }}
// Code generated from {{ .Packages.GeneratedFrom }}
{{ end }}

{{ if not (eq .Packages.SourceName "") }}
package {{ .Opts.PackageName | default .Packages.DestName }}
{{ else }}
package {{ .Packages.DestName }}
{{ end }}

{{ if gt (len .Packages.Imports) 0 }}
{{- range .Packages.Imports }}
import {{ . }}
{{- end }}
{{ end }}

{{ if and (not .Packages.HasGenerate) (not .Opts.NoCMD) }}
//go:generate go run github.com/kilianpaquier/go-builder-generator/cmd/go-builder-generator@latest generate {{ .Opts.ToString .Name }}
{{ end }}

{{- $builder := print .Name "Builder" }}

{{- $fullname := print .Name }}
{{- if not (eq .Packages.SourceName "") }}
{{- $fullname = print .Packages.SourceName "." $fullname }}
{{- end }}

{{- $genericFullName := joinFields .TypeParams }}
{{- $genericName := joinFieldsNames .TypeParams }}

// {{ $builder }} represents {{ .Name }}'s builder.
type {{ $builder }}{{ $genericFullName }} struct {
    build {{ $fullname }}{{ $genericName }}
}

{{ $new := "new" }}
{{ if .Exported }}
{{ $new = "New" }}
{{ end }}

// {{ $new }}{{ title $builder }} creates a new {{ $builder }}.
func {{ $new }}{{ title $builder }}{{ $genericFullName }}() *{{ $builder }}{{ $genericName }} {
    return &{{ $builder }}{{ $genericName }}{}
}

// Copy reassigns the builder struct (behind pointer) to a new pointer and returns it.
func (b *{{ $builder }}{{ $genericName }}) Copy() *{{ $builder }}{{ $genericName }} {
    return &{{ $builder }}{{ $genericName }}{b.build}
}

// Build returns built {{ .Name }}.
func (b *{{ $builder }}{{ $genericName }}) Build() (*{{ $fullname }}{{ $genericName }}{{ if .Opts.ValidateFunc }}, error{{ end }}) {
{{- if gt (len .DefaultFuncs) 0 }}
    b = b{{ range .DefaultFuncs }}.{{ . }}(){{ end }}

{{ end -}}

    result := b.build
{{- if .Opts.ValidateFunc }}
    if err := result.{{ .Opts.ValidateFunc }}(); err != nil {
        return nil, fmt.Errorf("validation of '{{ .Name }}''s struct: %w", err)
    }
    return &result, nil
{{- else }}
    return &result
{{- end }}
}

{{- range .Fields }}
{{- if not .Opts.Ignore }}

{{/*
    put setter prefix first letter in upper:
        - if the field is exported (logical, to be able to set the value)
        - if the parent is unexported (exported function for an unexported type)
*/}}
{{ $prefix := $.Opts.Prefix }}
{{ if or .Exported (not $.Exported) }}
{{ $prefix = title $.Opts.Prefix }}
{{ end }}

{{/* 
    put unexported name first letter in upper:
        - if the prefix is present (beauty) 
        - if the parent is unexported (exported function for an unexported type)
        - if the field possess the 'export' option
*/}}
{{ $name := .Name }}
{{ if or (not (eq $prefix "")) (not $.Exported) (.Opts.Export) }}
{{ $name = title .Name }}
{{ end }}
{{ $funcName := .Opts.FuncName | default (printf "%s%s" $prefix $name) }}

// {{ $funcName }} sets {{ $.Name }}'s {{ .Name }}.
{{- if .Opts.Append }}
func (b *{{ $builder }}{{ $genericName }}) {{ $funcName }}({{ .ParamName }} ...{{ .AlteredType }}) *{{ $builder }}{{ $genericName }} {
{{- if $.Opts.ReturnCopy }}
    b = b.Copy()
{{- end }}
{{- if hasPrefix "*" .InitialType }}
    *b.build.{{ .Name }} = append(*b.build.{{ .Name }}, {{ .ParamName }}...)
{{- else }}
    b.build.{{ .Name }} = append(b.build.{{ .Name }}, {{ .ParamName }}...)
{{- end }}
    return b
}
{{- else }}
func (b *{{ $builder }}{{ $genericName }}) {{ $funcName }}({{ .ParamName }} {{ if .Opts.Pointer }}*{{ end }}{{ .AlteredType }}) *{{ $builder }}{{ $genericName }} {
{{- if $.Opts.ReturnCopy }}
    b = b.Copy()
{{- end }}
    b.build.{{ .Name }} = {{ if and (not .Opts.Pointer) (hasPrefix "*" .InitialType) }}&{{ end }}{{ .ParamName }}
    return b
}
{{- end }}
{{- end }}
{{- end }}
