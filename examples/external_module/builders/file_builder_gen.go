// Code generated by go-builder-generator (https://github.com/kilianpaquier/go-builder-generator). DO NOT EDIT.

package builders

import "golang.org/x/mod/modfile"

// FileBuilder represents File's builder.
type FileBuilder struct {
	build modfile.File
}

// NewFileBuilder creates a new FileBuilder.
func NewFileBuilder() *FileBuilder {
	return &FileBuilder{}
}

// Copy reassigns the builder struct (behind pointer) to a new pointer and returns it.
func (b *FileBuilder) Copy() *FileBuilder {
	return &FileBuilder{b.build}
}

// Build returns built File.
func (b *FileBuilder) Build() *modfile.File {
	result := b.build
	return &result
}

// Exclude sets File's Exclude.
func (b *FileBuilder) Exclude(exclude []*modfile.Exclude) *FileBuilder {
	b.build.Exclude = exclude
	return b
}

// Go sets File's Go.
func (b *FileBuilder) Go(value modfile.Go) *FileBuilder {
	b.build.Go = &value
	return b
}

// Godebug sets File's Godebug.
func (b *FileBuilder) Godebug(godebug []*modfile.Godebug) *FileBuilder {
	b.build.Godebug = godebug
	return b
}

// Ignore sets File's Ignore.
func (b *FileBuilder) Ignore(ignore []*modfile.Ignore) *FileBuilder {
	b.build.Ignore = ignore
	return b
}

// Module sets File's Module.
func (b *FileBuilder) Module(module modfile.Module) *FileBuilder {
	b.build.Module = &module
	return b
}

// Replace sets File's Replace.
func (b *FileBuilder) Replace(replace []*modfile.Replace) *FileBuilder {
	b.build.Replace = replace
	return b
}

// Require sets File's Require.
func (b *FileBuilder) Require(require []*modfile.Require) *FileBuilder {
	b.build.Require = require
	return b
}

// Retract sets File's Retract.
func (b *FileBuilder) Retract(retract []*modfile.Retract) *FileBuilder {
	b.build.Retract = retract
	return b
}

// Syntax sets File's Syntax.
func (b *FileBuilder) Syntax(syntax modfile.FileSyntax) *FileBuilder {
	b.build.Syntax = &syntax
	return b
}

// Tool sets File's Tool.
func (b *FileBuilder) Tool(tool []*modfile.Tool) *FileBuilder {
	b.build.Tool = tool
	return b
}

// Toolchain sets File's Toolchain.
func (b *FileBuilder) Toolchain(toolchain modfile.Toolchain) *FileBuilder {
	b.build.Toolchain = &toolchain
	return b
}
