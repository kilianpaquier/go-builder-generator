// Code generated by go-builder-generator (https://github.com/kilianpaquier/go-builder-generator). DO NOT EDIT.

package builders

import (
	"io"
	"io/fs"

	"go/build"
	_ "unsafe"
)

// ContextBuilder represents Context's builder.
type ContextBuilder struct {
	build build.Context
}

// NewContextBuilder creates a new ContextBuilder.
func NewContextBuilder() *ContextBuilder {
	return &ContextBuilder{}
}

// Copy reassigns the builder struct (behind pointer) to a new pointer and returns it.
func (b *ContextBuilder) Copy() *ContextBuilder {
	return &ContextBuilder{b.build}
}

// Build returns built Context.
func (b *ContextBuilder) Build() *build.Context {
	result := b.build
	return &result
}

// BuildTags sets Context's BuildTags.
func (b *ContextBuilder) BuildTags(buildTags []string) *ContextBuilder {
	b.build.BuildTags = buildTags
	return b
}

// CgoEnabled sets Context's CgoEnabled.
func (b *ContextBuilder) CgoEnabled(cgoEnabled bool) *ContextBuilder {
	b.build.CgoEnabled = cgoEnabled
	return b
}

// Compiler sets Context's Compiler.
func (b *ContextBuilder) Compiler(compiler string) *ContextBuilder {
	b.build.Compiler = compiler
	return b
}

// Dir sets Context's Dir.
func (b *ContextBuilder) Dir(dir string) *ContextBuilder {
	b.build.Dir = dir
	return b
}

// GOARCH sets Context's GOARCH.
func (b *ContextBuilder) GOARCH(goarch string) *ContextBuilder {
	b.build.GOARCH = goarch
	return b
}

// GOOS sets Context's GOOS.
func (b *ContextBuilder) GOOS(goos string) *ContextBuilder {
	b.build.GOOS = goos
	return b
}

// GOPATH sets Context's GOPATH.
func (b *ContextBuilder) GOPATH(gopath string) *ContextBuilder {
	b.build.GOPATH = gopath
	return b
}

// GOROOT sets Context's GOROOT.
func (b *ContextBuilder) GOROOT(goroot string) *ContextBuilder {
	b.build.GOROOT = goroot
	return b
}

// HasSubdir sets Context's HasSubdir.
func (b *ContextBuilder) HasSubdir(hasSubdir func(root, dir string) (rel string, ok bool)) *ContextBuilder {
	b.build.HasSubdir = hasSubdir
	return b
}

// InstallSuffix sets Context's InstallSuffix.
func (b *ContextBuilder) InstallSuffix(installSuffix string) *ContextBuilder {
	b.build.InstallSuffix = installSuffix
	return b
}

// IsAbsPath sets Context's IsAbsPath.
func (b *ContextBuilder) IsAbsPath(isAbsPath func(path string) bool) *ContextBuilder {
	b.build.IsAbsPath = isAbsPath
	return b
}

// IsDir sets Context's IsDir.
func (b *ContextBuilder) IsDir(isDir func(path string) bool) *ContextBuilder {
	b.build.IsDir = isDir
	return b
}

// JoinPath sets Context's JoinPath.
func (b *ContextBuilder) JoinPath(joinPath func(elem ...string) string) *ContextBuilder {
	b.build.JoinPath = joinPath
	return b
}

// OpenFile sets Context's OpenFile.
func (b *ContextBuilder) OpenFile(openFile func(path string) (io.ReadCloser, error)) *ContextBuilder {
	b.build.OpenFile = openFile
	return b
}

// ReadDir sets Context's ReadDir.
func (b *ContextBuilder) ReadDir(readDir func(dir string) ([]fs.FileInfo, error)) *ContextBuilder {
	b.build.ReadDir = readDir
	return b
}

// ReleaseTags sets Context's ReleaseTags.
func (b *ContextBuilder) ReleaseTags(releaseTags []string) *ContextBuilder {
	b.build.ReleaseTags = releaseTags
	return b
}

// SplitPathList sets Context's SplitPathList.
func (b *ContextBuilder) SplitPathList(splitPathList func(list string) []string) *ContextBuilder {
	b.build.SplitPathList = splitPathList
	return b
}

// ToolTags sets Context's ToolTags.
func (b *ContextBuilder) ToolTags(toolTags []string) *ContextBuilder {
	b.build.ToolTags = toolTags
	return b
}

// UseAllFiles sets Context's UseAllFiles.
func (b *ContextBuilder) UseAllFiles(useAllFiles bool) *ContextBuilder {
	b.build.UseAllFiles = useAllFiles
	return b
}
