# Code generated by craft; DO NOT EDIT.

# all available settings of specific linters
linters-settings:
  cyclop:
    # The maximal code complexity to report.
    # Default: 10
    max-complexity: 20

  decorder:
    # Required order of `type`, `const`, `var` and `func` declarations inside a file.
    # Default: types before constants before variables before functions.
    dec-order:
      - const
      - var
      - type
      - func
    # If true, order of declarations is not checked at all.
    # Default: true (disabled)
    disable-dec-order-check: true
    # If true, `init` func can be anywhere in file (does not have to be declared before all other functions).
    # Default: true (disabled)
    disable-init-func-first-check: true

  funlen:
    # Checks the number of lines in a function.
    # If lower than 0, disable the check.
    # Default: 60
    lines: 80
    # Checks the number of statements in a function.
    # If lower than 0, disable the check.
    # Default: 40
    statements: 60
    # Ignore comments when counting lines.
    # Default false
    ignore-comments: true

  gci:
    # Section configuration to compare against.
    # Section names are case-insensitive and may contain parameters in ().
    # The default order of sections is `standard > default > custom > blank > dot`,
    # If `custom-order` is `true`, it follows the order of `sections` option.
    # Default: ["standard", "default"]
    sections:
      - standard # Standard section: captures all standard packages.
      - default # Default section: contains all imports that could not be matched to another section type.
      - prefix(github.com/kilianpaquier/go-builder-generator) # Custom section: groups all imports with the specified Prefix.

  gocognit:
    # Minimal code complexity to report.
    # Default: 30 (but we recommend 10-20)
    min-complexity: 30

  gosec:
    # Exclude generated files
    # Default: false
    exclude-generated: true

  govet:
    # Enable all analyzers.
    # Default: false
    enable-all: true
    # Disable analyzers by name.
    # (in addition to default
    #   atomicalign, deepequalerrors, fieldalignment, findcall, nilness, reflectvaluecompare, shadow, sortslice,
    #   timeformat, unusedwrite
    # ).
    # Run `go tool vet help` to see all analyzers.
    # Default: []
    disable:
      - fieldalignment
      - shadow

  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    # Default is to use a neutral variety of English.
    locale: US
    # Default: []
    ignore-words: []

  nonamedreturns:
    # Report named error if it is assigned inside defer.
    # Default: false
    report-error-in-defer: true

  paralleltest:
    # Ignore missing calls to `t.Parallel()` and only report incorrect uses of it.
    # Default: false
    ignore-missing: true
    # Ignore missing calls to `t.Parallel()` in subtests. Top-level tests are
    # still required to have `t.Parallel`, but subtests are allowed to skip it.
    # Default: false
    ignore-missing-subtests: true

  perfsprint:
    # Optimizes even if it requires an int or uint type cast.
    # Default: true
    int-conversion: true
    # Optimizes into `err.Error()` even if it is only equivalent for non-nil errors.
    # Default: false
    err-error: true
    # Optimizes `fmt.Errorf`.
    # Default: true
    errorf: true
    # Optimizes `fmt.Sprintf` with only one argument
    # Default: true
    sprintf1: true

  prealloc:
    # IMPORTANT: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.

    # Report pre-allocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # Default: true
    simple: true
    # Report pre-allocation suggestions on range loops.
    # Default: true
    range-loops: true
    # Report pre-allocation suggestions on for loops.
    # Default: false
    for-loops: true

  revive:
    # Sets the default severity.
    # See https://github.com/mgechev/revive#configuration
    # Default: warning
    severity: error
    # Sets the default failure confidence.
    # This means that linting errors with less than 0.8 confidence will be ignored.
    # Default: 0.8
    confidence: 0.1
    # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md
    rules:
      - name: argument-limit
        arguments: [6]
      - name: atomic
      - name: blank-imports
      - name: bool-literal-in-expr
      - name: call-to-gc
      - name: comment-spacings
      - name: confusing-naming
      - name: confusing-results
      - name: constant-logical-expr
      - name: context-as-argument
      - name: context-keys-type
      - name: datarace
      - name: deep-exit
      - name: defer
      - name: dot-imports
      - name: duplicated-imports
      - name: early-return
      - name: empty-block
      - name: empty-lines
      - name: enforce-map-style
        arguments:
          - literal
      - name: error-naming
      - name: error-return
      - name: error-strings
      - name: errorf
      - name: exported
        arguments:
          - checkPrivateReceivers
          - sayRepetitiveInsteadOfStutters
      - name: flag-parameter
      - name: function-result-limit
        arguments: [3]
      - name: get-return
      - name: identical-branches
      - name: if-return
      - name: increment-decrement
      - name: indent-error-flow
      - name: import-alias-naming
        arguments:
          - "^[a-z_][a-z_0-9]{0,}$"
      - name: imports-blocklist
      - name: import-shadowing
      - name: max-public-structs
        arguments: [8]
      - name: modifies-parameter
      - name: modifies-value-receiver
      - name: optimize-operands-order
      # - name: package-comments
      - name: range
      - name: range-val-in-closure
      - name: range-val-address
      - name: receiver-naming
      - name: redundant-import-alias
      - name: redefines-builtin-id
      - name: string-of-int
      - name: string-format
        arguments:
          - - 'fmt.Errorf[0]'
            - '/^([^A-Z]|$)/'
            - must not start with a capital letter
          - - 'fmt.Errorf[0]'
            - '/(^|[^\.!?])$/'
            - must not end in punctuation
          - - panic
            - '/^[^\n]*$/'
            - must not contain line breaks
      - name: struct-tag
      - name: superfluous-else
      - name: time-equal
      - name: time-naming
      - name: var-naming
        arguments:
          - [] # AllowList
          - [] # DenyList
          - - upperCaseConst: true # allow const variables to be uppercase
      - name: var-naming
        arguments:
          - [] # AllowList
          - [] # DenyList
          - - skipPackageNameChecks: true # allow packages name with "_"
      - name: var-declaration
      - name: unconditional-recursion
      - name: unexported-naming
      - name: unexported-return
      - name: unhandled-error
        arguments:
          - bytes.Buffer.Write.*
          - fmt.Print
          - fmt.Printf
          - fmt.Println
          - io.Writer.Write.*
          - strings.Builder.Write.*
      - name: unnecessary-stmt
      - name: unreachable-code
      - name: unused-parameter
        arguments:
          - allowRegex: "^_"
      - name: unused-receiver
        arguments:
          - allowRegex: "^_"
      - name: useless-break
      - name: waitgroup-by-value

  tagalign:
    # Specify the order of tags, the other tags will be sorted by name.
    # This option will be ignored if `sort` is false.
    # Default: []
    order:
      - json
      - yaml
      - yml
      - toml
      - mapstructure
      - binding
      - builder
      - validate
    # Whether enable strict style.
    # In this style, the tags will be sorted and aligned in the dictionary order,
    # and the tags with the same name will be aligned together.
    # Note: This option will be ignored if 'align' or 'sort' is false.
    # Default: false
    strict: true

  testifylint:
    require-error:
      # Regexp for assertions to analyze. If defined, then only matched error assertions will be reported.
      # Default: ""
      fn-pattern: ^NoErrorf?$

  varnamelen:
    # The longest distance, in source lines, that is being considered a "small scope".
    # Variables used in at most this many lines will be ignored.
    # Default: 5
    max-distance: 10
    # The minimum length of a variable's name that is considered "long".
    # Variable names that are at least this long will be ignored.
    # Default: 3
    min-name-length: 2

  whitespace:
    # Enforces newlines (or comments) after every multi-line if statement.
    # Default: false
    multi-if: true
    # Enforces newlines (or comments) after every multi-line function signature.
    # Default: false
    multi-func: true

issues:
  include:
    # revive:exported enforce revive comments on exported types
    - EXC0012 # exported (.+) should have comment( \(or a comment on this block\))? or be unexported
    - EXC0014 # comment on exported (.+) should be of the form "(.+)..."

    # revive:package-comments enforce revive comments on packages
    # - EXC0013 # package comment should be of the form "(.+)...
    # - EXC0015 # should have a package comment
  exclude:
    - G303 # file creation in shared tmp directory without using os.CreateTemp
    - G306 # Expect WriteFile permissions to be 0600 or less
    - ST1003 # already covered by revive var-naming linter (package naming constraints)
  exclude-rules:
    # disable funlen for all _test.go files
    - path: _test.go
      linters:
        - dupl
        - funlen
        - goconst
        - maintidx
  # Maximum issues count per one linter.
  # Set to 0 to disable.
  # Default: 50
  max-issues-per-linter: 0
  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3
  max-same-issues: 0

linters:
  # please, do not use `enable-all`: it's deprecated and will be removed soon.
  # inverted configuration with `enable-all` and `disable` is not scalable during updates of golangci-lint
  disable-all: true
  enable:
    - asasalint
    - bodyclose
    - canonicalheader
    - containedctx
    - contextcheck
    - copyloopvar
    - cyclop
    - decorder
    - dogsled
    - dupl
    - durationcheck
    - errname
    - errorlint
    - exhaustive
    - fatcontext
    - forbidigo
    - forcetypeassert
    - funlen
    - gci
    - gocheckcompilerdirectives
    - gocognit
    - goconst
    - gocritic
    - gocyclo
    - godox
    - gofumpt
    - goprintffuncname
    - gosec
    - gosimple
    - govet
    - grouper
    - importas
    - inamedparam
    - ineffassign
    - interfacebloat
    - intrange
    - maintidx
    - makezero
    - mirror
    - misspell
    - musttag
    - nakedret
    - nestif
    - nilerr
    - nilnil
    - noctx
    - nolintlint
    - nosprintfhostport
    - paralleltest
    - perfsprint
    - prealloc
    - predeclared
    - reassign
    - revive
    - rowserrcheck
    - sloglint
    - spancheck
    - sqlclosecheck
    - staticcheck
    - stylecheck
    - tagalign
    - testableexamples
    - testifylint
    - testpackage
    - thelper
    - tparallel
    - typecheck
    - unconvert
    - unused
    - usestdlibvars
    - usetesting
    - varnamelen
    - wastedassign
    - whitespace
