// Code generated by go-builder-generator (https://github.com/kilianpaquier/go-builder-generator). DO NOT EDIT.

// Code generated from types.go.

package builders

import (
	net_http "net/http"
	"net/url"

	"github.com/kilianpaquier/go-builder-generator/testdata"
)

// STDBuilder represents STD's builder.
type STDBuilder struct {
	build testdata.STD
}

// NewSTDBuilder creates a new STDBuilder.
func NewSTDBuilder() *STDBuilder {
	return &STDBuilder{}
}

// Copy reassigns the builder struct (behind pointer) to a new pointer and returns it.
func (b *STDBuilder) Copy() *STDBuilder {
	return &STDBuilder{b.build}
}

// Build returns built STD.
func (b *STDBuilder) Build() *testdata.STD {
	result := b.build
	return &result
}

// ACRONYMOUS sets STD's ACRONYMOUS.
func (b *STDBuilder) ACRONYMOUS(acronymous string) *STDBuilder {
	b.build.ACRONYMOUS = acronymous
	return b
}

// AnotherACRONYMOUS sets STD's AnotherACRONYMOUS.
func (b *STDBuilder) AnotherACRONYMOUS(anotherACRONYMOUS string) *STDBuilder {
	b.build.AnotherACRONYMOUS = anotherACRONYMOUS
	return b
}

// AnURL sets STD's AnURL.
func (b *STDBuilder) AnURL(anURL url.URL) *STDBuilder {
	b.build.AnURL = &anURL
	return b
}

// ID sets STD's ID.
func (b *STDBuilder) ID(id int64) *STDBuilder {
	b.build.ID = id
	return b
}

// SomeClientHTTP sets STD's SomeClientHTTP.
func (b *STDBuilder) SomeClientHTTP(someClientHTTP net_http.Client) *STDBuilder {
	b.build.SomeClientHTTP = &someClientHTTP
	return b
}

// SomeID sets STD's SomeID.
func (b *STDBuilder) SomeID(someID int64) *STDBuilder {
	b.build.SomeID = someID
	return b
}

// URL sets STD's URL.
func (b *STDBuilder) URL(url url.URL) *STDBuilder {
	b.build.URL = &url
	return b
}
