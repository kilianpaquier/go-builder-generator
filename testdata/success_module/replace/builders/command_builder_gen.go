// Code generated by go-builder-generator (https://github.com/kilianpaquier/go-builder-generator). DO NOT EDIT.

package builders

import "github.com/spf13/cobra"

// CommandBuilder represents Command's builder.
type CommandBuilder struct {
	build cobra.Command
}

// NewCommandBuilder creates a new CommandBuilder.
func NewCommandBuilder() *CommandBuilder {
	return &CommandBuilder{}
}

// Copy reassigns the builder struct (behind pointer) to a new pointer and returns it.
func (b *CommandBuilder) Copy() *CommandBuilder {
	return &CommandBuilder{b.build}
}

// Build returns built Command.
func (b *CommandBuilder) Build() *cobra.Command {
	result := b.build
	return &result
}

// Aliases sets Command's Aliases.
func (b *CommandBuilder) Aliases(aliases []string) *CommandBuilder {
	b.build.Aliases = aliases
	return b
}

// Annotations sets Command's Annotations.
func (b *CommandBuilder) Annotations(annotations map[string]string) *CommandBuilder {
	b.build.Annotations = annotations
	return b
}

// ArgAliases sets Command's ArgAliases.
func (b *CommandBuilder) ArgAliases(argAliases []string) *CommandBuilder {
	b.build.ArgAliases = argAliases
	return b
}

// Args sets Command's Args.
func (b *CommandBuilder) Args(args cobra.PositionalArgs) *CommandBuilder {
	b.build.Args = args
	return b
}

// BashCompletionFunction sets Command's BashCompletionFunction.
func (b *CommandBuilder) BashCompletionFunction(bashCompletionFunction string) *CommandBuilder {
	b.build.BashCompletionFunction = bashCompletionFunction
	return b
}

// CompletionOptions sets Command's CompletionOptions.
func (b *CommandBuilder) CompletionOptions(completionOptions cobra.CompletionOptions) *CommandBuilder {
	b.build.CompletionOptions = completionOptions
	return b
}

// Deprecated sets Command's Deprecated.
func (b *CommandBuilder) Deprecated(deprecated string) *CommandBuilder {
	b.build.Deprecated = deprecated
	return b
}

// DisableAutoGenTag sets Command's DisableAutoGenTag.
func (b *CommandBuilder) DisableAutoGenTag(disableAutoGenTag bool) *CommandBuilder {
	b.build.DisableAutoGenTag = disableAutoGenTag
	return b
}

// DisableFlagParsing sets Command's DisableFlagParsing.
func (b *CommandBuilder) DisableFlagParsing(disableFlagParsing bool) *CommandBuilder {
	b.build.DisableFlagParsing = disableFlagParsing
	return b
}

// DisableFlagsInUseLine sets Command's DisableFlagsInUseLine.
func (b *CommandBuilder) DisableFlagsInUseLine(disableFlagsInUseLine bool) *CommandBuilder {
	b.build.DisableFlagsInUseLine = disableFlagsInUseLine
	return b
}

// DisableSuggestions sets Command's DisableSuggestions.
func (b *CommandBuilder) DisableSuggestions(disableSuggestions bool) *CommandBuilder {
	b.build.DisableSuggestions = disableSuggestions
	return b
}

// Example sets Command's Example.
func (b *CommandBuilder) Example(example string) *CommandBuilder {
	b.build.Example = example
	return b
}

// FParseErrWhitelist sets Command's FParseErrWhitelist.
func (b *CommandBuilder) FParseErrWhitelist(fparseErrWhitelist cobra.FParseErrWhitelist) *CommandBuilder {
	b.build.FParseErrWhitelist = fparseErrWhitelist
	return b
}

// GroupID sets Command's GroupID.
func (b *CommandBuilder) GroupID(groupID string) *CommandBuilder {
	b.build.GroupID = groupID
	return b
}

// Hidden sets Command's Hidden.
func (b *CommandBuilder) Hidden(hidden bool) *CommandBuilder {
	b.build.Hidden = hidden
	return b
}

// Long sets Command's Long.
func (b *CommandBuilder) Long(long string) *CommandBuilder {
	b.build.Long = long
	return b
}

// PersistentPostRun sets Command's PersistentPostRun.
func (b *CommandBuilder) PersistentPostRun(persistentPostRun func(cmd *cobra.Command, args []string)) *CommandBuilder {
	b.build.PersistentPostRun = persistentPostRun
	return b
}

// PersistentPostRunE sets Command's PersistentPostRunE.
func (b *CommandBuilder) PersistentPostRunE(persistentPostRunE func(cmd *cobra.Command, args []string) error) *CommandBuilder {
	b.build.PersistentPostRunE = persistentPostRunE
	return b
}

// PersistentPreRun sets Command's PersistentPreRun.
func (b *CommandBuilder) PersistentPreRun(persistentPreRun func(cmd *cobra.Command, args []string)) *CommandBuilder {
	b.build.PersistentPreRun = persistentPreRun
	return b
}

// PersistentPreRunE sets Command's PersistentPreRunE.
func (b *CommandBuilder) PersistentPreRunE(persistentPreRunE func(cmd *cobra.Command, args []string) error) *CommandBuilder {
	b.build.PersistentPreRunE = persistentPreRunE
	return b
}

// PostRun sets Command's PostRun.
func (b *CommandBuilder) PostRun(postRun func(cmd *cobra.Command, args []string)) *CommandBuilder {
	b.build.PostRun = postRun
	return b
}

// PostRunE sets Command's PostRunE.
func (b *CommandBuilder) PostRunE(postRunE func(cmd *cobra.Command, args []string) error) *CommandBuilder {
	b.build.PostRunE = postRunE
	return b
}

// PreRun sets Command's PreRun.
func (b *CommandBuilder) PreRun(preRun func(cmd *cobra.Command, args []string)) *CommandBuilder {
	b.build.PreRun = preRun
	return b
}

// PreRunE sets Command's PreRunE.
func (b *CommandBuilder) PreRunE(preRunE func(cmd *cobra.Command, args []string) error) *CommandBuilder {
	b.build.PreRunE = preRunE
	return b
}

// Run sets Command's Run.
func (b *CommandBuilder) Run(run func(cmd *cobra.Command, args []string)) *CommandBuilder {
	b.build.Run = run
	return b
}

// RunE sets Command's RunE.
func (b *CommandBuilder) RunE(runE func(cmd *cobra.Command, args []string) error) *CommandBuilder {
	b.build.RunE = runE
	return b
}

// Short sets Command's Short.
func (b *CommandBuilder) Short(short string) *CommandBuilder {
	b.build.Short = short
	return b
}

// SilenceErrors sets Command's SilenceErrors.
func (b *CommandBuilder) SilenceErrors(silenceErrors bool) *CommandBuilder {
	b.build.SilenceErrors = silenceErrors
	return b
}

// SilenceUsage sets Command's SilenceUsage.
func (b *CommandBuilder) SilenceUsage(silenceUsage bool) *CommandBuilder {
	b.build.SilenceUsage = silenceUsage
	return b
}

// SuggestFor sets Command's SuggestFor.
func (b *CommandBuilder) SuggestFor(suggestFor []string) *CommandBuilder {
	b.build.SuggestFor = suggestFor
	return b
}

// SuggestionsMinimumDistance sets Command's SuggestionsMinimumDistance.
func (b *CommandBuilder) SuggestionsMinimumDistance(suggestionsMinimumDistance int) *CommandBuilder {
	b.build.SuggestionsMinimumDistance = suggestionsMinimumDistance
	return b
}

// TraverseChildren sets Command's TraverseChildren.
func (b *CommandBuilder) TraverseChildren(traverseChildren bool) *CommandBuilder {
	b.build.TraverseChildren = traverseChildren
	return b
}

// Use sets Command's Use.
func (b *CommandBuilder) Use(use string) *CommandBuilder {
	b.build.Use = use
	return b
}

// ValidArgs sets Command's ValidArgs.
func (b *CommandBuilder) ValidArgs(validArgs []cobra.Completion) *CommandBuilder {
	b.build.ValidArgs = validArgs
	return b
}

// ValidArgsFunction sets Command's ValidArgsFunction.
func (b *CommandBuilder) ValidArgsFunction(validArgsFunction cobra.CompletionFunc) *CommandBuilder {
	b.build.ValidArgsFunction = validArgsFunction
	return b
}

// Version sets Command's Version.
func (b *CommandBuilder) Version(version string) *CommandBuilder {
	b.build.Version = version
	return b
}
