// Code generated by go-builder-generator (https://github.com/kilianpaquier/go-builder-generator). DO NOT EDIT.

package builders

import (
	"github.com/kilianpaquier/go-builder-generator/testdata/success_generic"
)

// AliasGenericBuilder represents AliasGeneric's builder.
type AliasGenericBuilder[T any, X success_generic.GenericValue] struct {
	build success_generic.AliasGeneric[T, X]
}

// NewAliasGenericBuilder creates a new AliasGenericBuilder.
func NewAliasGenericBuilder[T any, X success_generic.GenericValue]() *AliasGenericBuilder[T, X] {
	return &AliasGenericBuilder[T, X]{}
}

// Copy reassigns the builder struct (behind pointer) to a new pointer and returns it.
func (b *AliasGenericBuilder[T, X]) Copy() *AliasGenericBuilder[T, X] {
	return &AliasGenericBuilder[T, X]{b.build}
}

// Build returns built AliasGeneric.
func (b *AliasGenericBuilder[T, X]) Build() *success_generic.AliasGeneric[T, X] {
	result := b.build
	return &result
}

// ValueT sets AliasGeneric's ValueT.
func (b *AliasGenericBuilder[T, X]) ValueT(valueT T) *AliasGenericBuilder[T, X] {
	b.build.ValueT = valueT
	return b
}

// ValueX sets AliasGeneric's ValueX.
func (b *AliasGenericBuilder[T, X]) ValueX(valueX X) *AliasGenericBuilder[T, X] {
	b.build.ValueX = valueX
	return b
}
