// Code generated by go-builder-generator (https://github.com/kilianpaquier/go-builder-generator). DO NOT EDIT.

// Code generated from types.go.

package builders

import (
	"context"
	"time"

	"github.com/kilianpaquier/go-builder-generator/testdata"
)

// StructBuilder represents Struct's builder.
type StructBuilder struct {
	build testdata.Struct
}

// NewStructBuilder creates a new StructBuilder.
func NewStructBuilder() *StructBuilder {
	return &StructBuilder{}
}

// Copy reassigns the builder struct (behind pointer) to a new pointer and returns it.
func (b *StructBuilder) Copy() *StructBuilder {
	return &StructBuilder{b.build}
}

// Build returns built Struct.
func (b *StructBuilder) Build() *testdata.Struct {
	result := b.build
	return &result
}

// AnotherStruct sets Struct's AnotherStruct.
func (b *StructBuilder) AnotherStruct(anotherStruct struct {
	Nested struct {
		Field string `json:"field,omitempty"`
		Ctx   context.Context
	}
	NotNested int64 `json:"not_nested"`
	Ctx       context.Context
	Alias     testdata.Int64Alias
}) *StructBuilder {
	b.build.AnotherStruct = anotherStruct
	return b
}

// ExportedA sets Struct's ExportedA.
func (b *StructBuilder) ExportedA(exportedA struct {
	ExportedA testdata.Int64Alias
	ExportedB testdata.Int64Alias
}) *StructBuilder {
	b.build.ExportedA = exportedA
	return b
}

// ExportedC sets Struct's ExportedC.
func (b *StructBuilder) ExportedC(exportedC struct {
	ExportedA testdata.Int64Alias
	ExportedB testdata.Int64Alias
}) *StructBuilder {
	b.build.ExportedC = exportedC
	return b
}

// ExportedD sets Struct's ExportedD.
func (b *StructBuilder) ExportedD(exportedD struct {
	ExportedA testdata.Int64Alias
	ExportedB testdata.Int64Alias
}) *StructBuilder {
	b.build.ExportedD = exportedD
	return b
}

// TimeA sets Struct's TimeA.
func (b *StructBuilder) TimeA(timeA time.Time) *StructBuilder {
	b.build.TimeA = timeA
	return b
}

// TimeB sets Struct's TimeB.
func (b *StructBuilder) TimeB(timeB time.Time) *StructBuilder {
	b.build.TimeB = timeB
	return b
}
