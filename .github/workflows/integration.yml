# Code generated by craft; DO NOT EDIT.

name: Integration
run-name: Integration

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
  push:
    branches:
      - alpha
      - beta
      - dev
      - develop
      - development
      - next
      - staging
      - main
      - master
      - v[0-9]+.x
      - v[0-9]+.[0-9]+.x
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run-workflow:
    name: Run Workflow
    runs-on: ubuntu-latest
    # run on branches or pull request not being draft and associated with branches not protected
    if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && !github.event.pull_request.draft && !github.ref_protected) }}
    steps:
      - run: echo "Running workflow"

  pre-commit:
    name: Pre-Commit
    runs-on: ubuntu-latest
    needs: run-workflow
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      - uses: actions/setup-python@v5
        with:
          # renovate: datasource=github-tags packageName=actions/python-versions versioning=npm
          python-version: 3.x
      - uses: pre-commit/action@v3.0.1

  go-vulncheck:
    name: Go Vulnerability Check
    runs-on: ubuntu-latest
    needs: run-workflow
    steps:
      - uses: golang/govulncheck-action@v1
        with:
          check-latest: true
          go-package: ./...
          go-version-file: go.mod

  go-lint:
    name: Go Lint
    runs-on: ubuntu-latest
    needs: run-workflow
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          check-latest: true
          go-version-file: go.mod
          token: ${{ secrets.GITHUB_TOKEN }}
      - run: mkdir -p reports/
      - uses: golangci/golangci-lint-action@v8
        with:
          args: --config .golangci.yml --timeout 240s --allow-parallel-runners --output.checkstyle.path "reports/go-ci-lint.checkstyle.xml" --output.text.path stdout
          # renovate: datasource=github-tags packageName=golangci/golangci-lint versioning=docker
          version: v2.2

  go-test:
    name: Go Test
    runs-on: ${{ matrix.os }}
    needs: go-lint
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          - windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          check-latest: true
          go-version-file: go.mod
          token: ${{ secrets.GITHUB_TOKEN }}
      - run: mkdir -p reports/
      - if: ${{ matrix.os != 'windows-latest' }}
        run: |-
          set -o pipefail
          go test ./... -v -coverpkg="./..." -covermode="count" -coverprofile="reports/go-coverage.native.out" -timeout=15s | tee "reports/tests.log"
      - if: ${{ matrix.os == 'windows-latest' }}
        run: go test ./... -v -coverpkg="./..." -covermode="count" -coverprofile="reports/go-coverage.native.out" -timeout=15s | tee "reports/tests.log"
      - if: ${{ !cancelled() }}
        shell: bash
        run: |-
          go run github.com/jstemmer/go-junit-report/v2@latest -in "reports/tests.log" -out "reports/go-test.xunit.xml"
          go tool test2json < "reports/tests.log" > "reports/go-test.native.json"
      - if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          codecov_yml_path: .codecov.yml
          disable_search: true
          env_vars: OS
          fail_ci_if_error: false
          files: reports/go-test.xunit.xml
          flags: ${{ matrix.os }}
          slug: ${{ github.repository }}
          token: ${{ secrets.CODECOV_TOKEN }}
        env:
          OS: ${{ matrix.os }}
      - if: ${{ !cancelled() }}
        uses: codecov/codecov-action@v5
        with:
          codecov_yml_path: .codecov.yml
          disable_search: true
          env_vars: OS
          fail_ci_if_error: false
          files: reports/go-coverage.native.out
          flags: ${{ matrix.os }}
          slug: ${{ github.repository }}
          token: ${{ secrets.CODECOV_TOKEN }}
        env:
          OS: ${{ matrix.os }}
