# Code generated by craft; DO NOT EDIT.

name: Version
description: Compute the next release version or release it

inputs:
  download_dist:
    description: Whether to build artifact into dist folder or not
    default: "false"
  mode:
    description: |
      Action mode:
        - "dry_run" to only get the next version number
        - "draft" to get the next version number and create draft pull requests and releases
        - "release" to get the next version number and create pull requests, tags and releases
    required: true
  token:
    description: GitHub access token
    required: true

outputs:
  branch_sha:
    description: The concerned branch sha256 value
    value: ${{ steps.version.outputs.branch_sha }}
  release:
    description: Whether a release can be made or not
    value: ${{ steps.version.outputs.release }}
  version:
    description: The computed version
    value: ${{ steps.version.outputs.version }}

runs:
  using: composite
  steps:
    - shell: bash
      run: |
        if [ "${MODE}" != "dry_run" ] && [ "${MODE}" != "draft" ] && [ "${MODE}" != "release" ]; then
          echo "invalid input mode '${MODE}', must be one of 'dry_run', 'draft', 'release'"
          exit 2
        fi

        if [ "${MODE}" != "dry_run" ] && [ "${GITHUB_REF_PROTECTED}" != "true" ]; then
          echo "invalid input mode '${MODE}', can't be 'draft' or 'release' when github branch isn't protected"
        fi
      env:
        MODE: ${{ inputs.mode }}
    - if: ${{ inputs.download_dist == 'true' }}
      uses: actions/download-artifact@v4
      with:
        name: build
        path: dist
    # https://github.com/marketplace/actions/action-for-semantic-release
    - id: semrel_version
      continue-on-error: true
      uses: cycjimmy/semantic-release-action@v4
      with:
        semantic_version: 24
        extra_plugins: |
          @semantic-release/changelog
          @semantic-release/commit-analyzer
          @semantic-release/exec
          @semantic-release/git
          @semantic-release/github
          @semantic-release/release-notes-generator
          conventional-changelog-conventionalcommits
          semantic-release-license
        dry_run: ${{ inputs.mode != 'release' }}
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
    - id: version
      shell: bash
      run: |
        BRANCH_SHA=$(echo "${GITHUB_REF_NAME}" | sha256sum | cut -c -8)
        echo "branch_sha=${BRANCH_SHA}" >> $GITHUB_OUTPUT

        if echo "${SEMREL_INFO_NEXT_VERSION}" | grep -Eq "^[0-9]+(\.[0-9]+){2}.*$"; then
          echo "version=v${SEMREL_INFO_NEXT_VERSION}" >> $GITHUB_OUTPUT
          if echo "${SEMREL_INFO_NEXT_VERSION}" | grep -Eq "^[0-9]+(\.[0-9]+){2}$"; then
            echo "release=true" >> $GITHUB_OUTPUT
          else
            echo "release=false" >> $GITHUB_OUTPUT
          fi
          exit 0
        fi

        git fetch --tags

        SEMREL_INFO_LAST_VERSION=$(git tag --list | sort -V | tail -n1)

        SEMREL_INFO_NEXT_VERSION=${SEMREL_INFO_LAST_VERSION-1.0.0}
        SEMREL_INFO_NEXT_VERSION=${SEMREL_INFO_NEXT_VERSION%-*}

        echo "version=v${SEMREL_INFO_NEXT_VERSION#v}-build.${BRANCH_SHA}" >> $GITHUB_OUTPUT
        echo "release=false" >> $GITHUB_OUTPUT
      env:
        SEMREL_INFO_LAST_VERSION: ${{ steps.semrel_version.outputs.last_release_version }}
        SEMREL_INFO_NEXT_VERSION: ${{ steps.semrel_version.outputs.new_release_version }}
    - shell: bash
      run: echo $VERSION
      env:
        VERSION: ${{ steps.version.outputs.version }}